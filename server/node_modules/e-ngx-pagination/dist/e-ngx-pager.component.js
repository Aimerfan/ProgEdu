"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var forms_1 = require("@angular/forms");
var pagerConfig = {
    itemsPerPage: 10,
    previousText: '上一页',
    nextText: '下一页',
    align: true
};
var ENgxPagerComponent = (function () {
    function ENgxPagerComponent(cd, renderer, elementRef) {
        this.numPages = new core_1.EventEmitter(false);
        this.pageChanged = new core_1.EventEmitter(false);
        this.onChange = Function.prototype;
        this.onTouched = Function.prototype;
        this.inited = false;
        this.cd = cd;
        this.renderer = renderer;
        this.elementRef = elementRef;
        cd.valueAccessor = this;
        this.config = this.config || pagerConfig;
    }
    Object.defineProperty(ENgxPagerComponent.prototype, "itemsPerPage", {
        get: function () {
            return this._itemsPerPage;
        },
        set: function (v) {
            this._itemsPerPage = v;
            this.totalPages = this.calculateTotalPages();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ENgxPagerComponent.prototype, "totalItems", {
        get: function () {
            return this._totalItems;
        },
        set: function (v) {
            this._totalItems = v;
            this.totalPages = this.calculateTotalPages();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ENgxPagerComponent.prototype, "totalPages", {
        get: function () {
            return this._totalPages;
        },
        set: function (v) {
            this._totalPages = v;
            this.numPages.emit(v);
            if (this.inited) {
                this.selectPage(this.page);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ENgxPagerComponent.prototype, "page", {
        get: function () {
            return this._page;
        },
        set: function (value) {
            var _previous = this._page;
            this._page = (value > this.totalPages) ? this.totalPages : (value || 1);
            if (_previous === this._page || typeof _previous === 'undefined') {
                return;
            }
            this.pageChanged.emit({
                page: this._page,
                itemsPerPage: this.itemsPerPage
            });
        },
        enumerable: true,
        configurable: true
    });
    ENgxPagerComponent.prototype.ngOnInit = function () {
        this.classMap = this.elementRef.nativeElement.getAttribute('class') || '';
        this.itemsPerPage = typeof this.itemsPerPage !== 'undefined'
            ? this.itemsPerPage
            : pagerConfig.itemsPerPage;
        this.totalPages = this.calculateTotalPages();
        this.page = this.cd.value;
        this.inited = true;
    };
    ENgxPagerComponent.prototype.writeValue = function (value) {
        this.page = value;
    };
    ENgxPagerComponent.prototype.getText = function (key) {
        return pagerConfig[key + 'Text'];
    };
    ENgxPagerComponent.prototype.noPrevious = function () {
        return this.page === 1;
    };
    ENgxPagerComponent.prototype.noNext = function () {
        return this.page === this.totalPages;
    };
    ENgxPagerComponent.prototype.registerOnChange = function (fn) {
        this.onChange = fn;
    };
    ENgxPagerComponent.prototype.registerOnTouched = function (fn) {
        this.onTouched = fn;
    };
    ENgxPagerComponent.prototype.selectPage = function (page, event) {
        if (event) {
            event.preventDefault();
        }
        if (!this.disabled) {
            if (event && event.target) {
                var target = event.target;
                target.blur();
            }
            this.writeValue(page);
            this.cd.viewToModelUpdate(this.page);
        }
    };
    ENgxPagerComponent.prototype.calculateTotalPages = function () {
        var totalPages = this.itemsPerPage < 1
            ? 1
            : Math.ceil(this.totalItems / this.itemsPerPage);
        return Math.max(totalPages || 0, 1);
    };
    ENgxPagerComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'e-ngx-pager[ngModel]',
                    template: "\n   <ul class=\"pager\">\n    <li [class.disabled]=\"noPrevious()\" [class.previous]=\"align\" [ngClass]=\"{'pull-right': align}\">\n        <a href (click)=\"selectPage(page - 1, $event)\">{{getText('previous')}}</a>\n    </li>\n    <li [class.disabled]=\"noNext()\" [class.next]=\"align\" [ngClass]=\"{'pull-right': align}\">\n        <a href (click)=\"selectPage(page + 1, $event)\">{{getText('next')}}</a>\n    </li>\n   </ul>\n    ",
                    providers: [forms_1.NgModel]
                },] },
    ];
    /** @nocollapse */
    ENgxPagerComponent.ctorParameters = function () { return [
        { type: forms_1.NgModel, decorators: [{ type: core_1.Self },] },
        { type: core_1.Renderer, },
        { type: core_1.ElementRef, },
    ]; };
    ENgxPagerComponent.propDecorators = {
        "align": [{ type: core_1.Input },],
        "previousText": [{ type: core_1.Input },],
        "nextText": [{ type: core_1.Input },],
        "lastText": [{ type: core_1.Input },],
        "disabled": [{ type: core_1.Input },],
        "numPages": [{ type: core_1.Output },],
        "pageChanged": [{ type: core_1.Output },],
        "itemsPerPage": [{ type: core_1.Input },],
        "totalItems": [{ type: core_1.Input },],
    };
    return ENgxPagerComponent;
}());
exports.ENgxPagerComponent = ENgxPagerComponent;
//# sourceMappingURL=e-ngx-pager.component.js.map